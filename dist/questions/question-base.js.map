{"version":3,"file":"question-base.js","sourceRoot":"","sources":["../../src/app/questions/question-base.ts"],"names":[],"mappings":"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","sourcesContent":["import { Input, ChangeDetectorRef } from '@angular/core';\r\nimport { FormGroup, AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// import { RuleCommunicationService } from '../services/rule-communication.service';\r\nexport class QuestionBase {\r\n  @Input()form:FormGroup;\r\n  @Input()readOnly = false;\r\n  @Input()definition:any;\r\n  @Input()language = 'english';\r\n  protected currentControl:any;\r\n  protected validatorsToBind:Array<ValidatorFn>=[];\r\n  public placeholder:string;\r\n  public labelText:string;\r\n  public formControlName:string;\r\n  public visible = true;\r\n  public value:string;\r\n  public id:number;\r\n  public hasError = false;\r\n  public errorMessage = '';\r\n  public subscription:Subscription;\r\n  public required:boolean;\r\n  public loadDataFunc:any\r\n  // CSS related vars\r\n  public divClass = 'question-input';\r\n  public labelClass = 'question-label';\r\n  public containerClass = 'col-md-6';\r\n  protected validationMessages: { [key: string]: { [key: string]: string } };\r\n  constructor( private baseChangeDetector: ChangeDetectorRef) {\r\n    this.validationMessages = {\r\n      english:{\r\n        required:'This is a required field',\r\n        minlength:'This field must be at least X characters',\r\n        maxlength:'This field cannot exceed X characters',\r\n        pattern:'This field is not the correct type'\r\n      },\r\n      spanish:{\r\n        required:'Este es un campo obligatorio',\r\n        minlength:'Este campo debe tener como mÃ­nimo X caracteres',\r\n        maxlength:'Este campo no puede exceder los caracteres X'\r\n      }\r\n    };\r\n    // this.subscription = baseRuleService.ruleAnnounceSource$.subscribe(\r\n    //   (ruleAction:any) => {\r\n    //     if(this.formControlName === ruleAction.name) {\r\n    //       this.ruleActionHandler(ruleAction);\r\n    //     }\r\n    //   }\r\n    // )\r\n  }\r\n  setCssClasses(columnWidth:number):void {\r\n    switch (columnWidth) {\r\n      case 3:{\r\n        if (this.labelText.length === 0) {\r\n          this.divClass = 'col-md-12';\r\n          this.labelClass = 'hidden';\r\n          this.containerClass = 'col-md-3'\r\n        } else {\r\n          this.containerClass = 'col-md-3';\r\n        }\r\n        break;\r\n      }\r\n      case 6:{\r\n        if (this.labelText.length === 0) {\r\n          this.divClass = 'question-input no-label';\r\n          this.labelClass = 'hidden';\r\n        }\r\n        break;\r\n      }\r\n      case 4:{\r\n        if (this.labelText.length === 0) {\r\n          this.divClass = 'col-md-12';\r\n          this.labelClass = 'hidden';\r\n          this.containerClass = 'col-md-4'\r\n        } else {\r\n          this.containerClass = 'col-md-4';\r\n        }\r\n        break;\r\n      }\r\n      case 5:{\r\n        if(this.labelText.length === 0) {\r\n          this.divClass = 'col-md-12';\r\n          this.labelClass = 'hidden';\r\n          this.containerClass = 'col-md-5';\r\n        } else {\r\n          this.containerClass = 'col-md-5';\r\n        }\r\n        break;\r\n      }\r\n      case 7:{\r\n        if(this.labelText.length === 0) {\r\n          this.divClass = 'col-md-12';\r\n          this.labelClass = 'hidden';\r\n          this.containerClass = 'col-md-7';\r\n        } else {\r\n          this.containerClass = 'col-md-7';\r\n        }\r\n        break;\r\n      }\r\n      case 12:{\r\n        if(this.labelText.length === 0) {\r\n          this.divClass = 'question-input-large no-label' ;\r\n          this.labelClass = 'hidden';\r\n          this.containerClass = 'col-md-12';\r\n        } else {\r\n          this.divClass = 'question-input-large' ;\r\n          this.labelClass = 'question-label-large';\r\n          this.containerClass = 'col-md-12';\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  checkValidationStatus(control: AbstractControl, language:string, forceValidation:boolean = false):string {\r\n    // reset hasError and message string\r\n    let message = '';\r\n    this.hasError = false;\r\n\r\n    if((control.dirty || control.touched || forceValidation) && control.errors) {\r\n      Object.keys(control.errors).map(messageKey => {\r\n        if(this.validationMessages[this.language][messageKey]) {\r\n          let tempMessage = this.validationMessages[this.language][messageKey]\r\n          if(messageKey === 'minlength') {\r\n            tempMessage = tempMessage.replace('X', this.definition.min_size.toString());\r\n          } else if(messageKey==='maxlength') {\r\n            tempMessage = tempMessage.replace('X', this.definition.max_size.toString());\r\n          }\r\n          message += tempMessage + ' ';\r\n          this.hasError = true;\r\n        }\r\n      });\r\n    }\r\n    return message;\r\n  }\r\n  setParameters(definition:any):void {\r\n    this.formControlName = definition.name;\r\n    this.labelText = definition.text;\r\n    this.placeholder = definition.placeholder;\r\n    this.currentControl = this.form.get(this.formControlName);\r\n    this.visible = definition.visible;\r\n    this.id = definition.id;\r\n    this.required = definition.required;\r\n    if(definition.min_size && definition.min_size !== -987) {\r\n      this.validatorsToBind.push(Validators.minLength(definition.min_size))\r\n    }\r\n    if(definition.max_size && definition.max_size !== -987) {\r\n      this.validatorsToBind.push(Validators.maxLength(definition.max_size));\r\n    }\r\n    if(definition.required && definition.visible) {\r\n      this.validatorsToBind.push(Validators.required);\r\n    }\r\n    if(this.validatorsToBind.length > 0) {\r\n      this.currentControl.setValidators(this.validatorsToBind);\r\n    }\r\n    this.setCssClasses(definition.column_width);\r\n    this.baseChangeDetector.detectChanges();\r\n  }\r\n\r\n  ruleActionHandler(ruleAction:any) {\r\n    switch (ruleAction.action) {\r\n      case 'show question':{\r\n        if (!this.visible) {\r\n          this.visible = true;\r\n          if (this.required && this.visible) {\r\n            this.definition.required = true;\r\n            this.bindValidationArray(this.buildValidationArray(this.definition));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 'hide question':{\r\n        if (this.visible) {\r\n          this.visible = false;\r\n          if (this.required && !this.visible) {\r\n            this.definition.required = false;\r\n            this.bindValidationArray(this.buildValidationArray(this.definition));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 'set question value':{\r\n        if (this.currentControl.value !== ruleAction.value) {\r\n          this.currentControl.setValue(ruleAction.value);\r\n          this.value = ruleAction.value;\r\n        }\r\n        break;\r\n      }\r\n      case 'make question readonly':{\r\n        if (this.readOnly === false) {\r\n          this.readOnly = true;\r\n          // ensure the local varialbe is the same as the form model\r\n          this.value = this.currentControl.value;\r\n        }\r\n        break;\r\n      }\r\n      case 'make question editable':{\r\n        if(this.readOnly === true) {\r\n          this.readOnly = false;\r\n        }\r\n        break;\r\n      }\r\n      case 'make question required':{\r\n        break;\r\n      }\r\n      case 'make question not required':{\r\n        break;\r\n      }\r\n      case 'change dropdown code group id':{\r\n        this.loadData(ruleAction.value);\r\n        break;\r\n      }\r\n      case 'force question validation':{\r\n        this.errorMessage = this.checkValidationStatus(this.currentControl, this.language, true);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  buildValidationArray(definition:any):Array<ValidatorFn> {\r\n    const validators: Array<ValidatorFn> = [];\r\n    if(definition.min_size && definition.min_size !== -987) {\r\n      validators.push(Validators.minLength(definition.min_size))\r\n    }\r\n    if(definition.max_size && definition.max_size !== -987) {\r\n      validators.push(Validators.maxLength(definition.max_size));\r\n    }\r\n    if(definition.required && definition.visible) {\r\n      validators.push(Validators.required);\r\n    }\r\n    return validators;\r\n  }\r\n\r\n  bindValidationArray(validators:Array<ValidatorFn>) {\r\n    if(validators.length > 0) {\r\n      this.currentControl.setValidators(validators);\r\n    }\r\n  }\r\n\r\n  loadData(dataObject:any):void {\r\n    // We do nothing here, but we implement only in the questions that need it.\r\n    // if (this.loadDataFunc && typeof this.loadDataFunc === \"function\" ){\r\n    //   this.loadDataFunc(dataObject);\r\n    // }\r\n  }\r\n}\r\n"]}